const fs = require('fs');
const https = require('https');
const path = require('path');
const minify = require('html-minifier').minify;

const argFile = process.argv[2];
const fileName = path.normalize(argFile);
const dirName = path.dirname(fileName);

const minifyConf = {
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: false, // kills font-awesome if true
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
}

if (!fileName) {
    console.error(`Usage: ${process.argv[0]} ${process.argv[1]} [file]`);
    process.exit(1);
}

let mainHtml = fs.readFileSync(fileName).toString(); // Get html-file into a string

const download = (url) => new Promise((resolve, reject) => {
    let result = '';
    https.get(url, function(response) {
        response.on('data', (d) => {
            result += d.toString();
        });
        // after download completed close filestream
        file.on("finish", () => {
            resolve(result);
        });
     });
})


const fixRootPath = (path) => {
    let npath = path.replace(/^.*\/wp-content/, 'localhost:8000/wp-content').replace(/^.*\/wp-includes/, 'localhost:8000/wp-includes');
    if (npath.indexOf('localhost:8000') === -1) {
        npath = ('localhost:8000/' + npath).replace('//', '/');
    }
    return npath;
}

console.log(`Baking CSS for ${fileName}`);
const cssImports = mainHtml.matchAll(/<link rel=["']stylesheet['"] .*? href=["']\/?(.*?)['"].*?\/>/g)
Array.from(cssImports).forEach(cssImport => {
    if (cssImport[1].indexOf('http') !== -1) {
        // webfile - skip for now
    } else {
        const cssFileName = fixRootPath(cssImport[1].replace(/%3F.*/, '')).replace(/\?.*/, '');
	    const css = fs.readFileSync(cssFileName).toString()
        const cssNoUtf = css.replace('@charset "UTF-8";', '');
        mainHtml = mainHtml.replace(cssImport[0], `<style>${cssNoUtf}</style>`);
        console.log(` * ${cssFileName}`);
    }
})

console.log(`Baking-JS for ${fileName} (${dirName})`);
const jsImports = mainHtml.matchAll(/<script src=["']\/?(.*?)['"].*?<\/script>/g)
Array.from(jsImports).forEach(jsImport => {

    let jsFile = jsImport[1].replace('%3F', '?')

    if (jsFile.indexOf('http') !== -1) {
        // webfile - skip for now
    } else {
        // localfile
        if (jsFile.indexOf('?') !== -1) {
            jsFile = `./localhost:8000/${jsFile.replace(/\?.*/, '')}`;
        } else {
            jsFile = `${dirName}/${jsFile}`;
        }
	jsFile = jsFile.replace(/localhost:8000\/.*\/wp-content/, 'localhost:8000/wp-content');
        try {
	    const jsFileName = path.normalize(jsFile);
            const js = fs.readFileSync(jsFileName).toString();
            mainHtml = mainHtml.replace(jsImport[0], `<script>${js}</script>`);
            console.log(` * ${jsFile}`);
        } catch (err) {
            console.error(` E ${err.message} ${jsFile}`);
        }
    }
});

try {
    const miniHtml = minify(mainHtml, minifyConf);
    fs.writeFileSync(fileName, miniHtml);
} catch(e) {
    console.log("ERR: --- exception ---");
    console.error("ERR: ", e);
    console.log("ERR: ", fileName);
    fs.writeFileSync(fileName, mainHtml);
}

